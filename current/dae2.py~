import numpy as np
import numpy.random
import pylab
import theano 
import pylearn2
import pylearn2.models.autoencoder as autoencoder

from pylearn2.config import yaml_parse
from pylearn2.utils import serial

import matplotlib
import matplotlib.pyplot as plt
import matplotlib.cm as cm



###
# Note: Currently training is failing dramatically



#Step 0: Set Parameters

# Default to 3 for RGB
numchannels = 3
# We assume a square input of inputdim x inputdim x numchannels
inputdim = 32

nclasses = 10
irange = .5

nhid = [100, 200, 300]
patchsize = [4, 6, 9]
#pooling = [1, 2, 4]
pooling = 1
stdev  = [.3, 1, 3]
#dweight = [30, 90]
dweight = 50
learningrate = .1




# In this YAML setup, I use 32*32*3 (inputdim x inputdim x numchannels) visible units, 
# for CIFAR10 data.  I don't know if this is ideal, maybe there is a better way to deal with 
# RGB data.

dataset = """!obj:pylearn2.datasets.cifar10.CIFAR10 {
        which_set: 'train',
        one_hot: 1,
        start: 0,
        stop: 1000
    }"""

model = """!obj:pylearn2.models.autoencoder.DenoisingAutoencoder {
    nhid: 100,
    irange: 0.05,
    act_enc: 'sigmoid',
    act_dec: 'sigmoid',
    nvis: 3072,
    corruptor: !obj:pylearn2.corruption.GaussianCorruptor {
            stdev: 0.1,
        },
}"""

algorithm = """!obj:pylearn2.training_algorithms.bgd.BGD {
        cost: !obj:pylearn2.costs.autoencoder.MeanSquaredReconstructionError {
        },
        batch_size: 200,
        line_search_mode: 'exhaustive',
        conjugate: 1,
        monitoring_dataset:
            {
                'train' : *train,
                'valid' : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              which_set: 'train',
                              one_hot: 1,
                              start: 1000,
                              stop:  1200
                          },
                'test'  : !obj:pylearn2.datasets.cifar10.CIFAR10 {
                              which_set: 'train',
                              one_hot: 1,
                              start: 1200,
                              stop: 1400
                          }
            },      
        termination_criterion : !obj:pylearn2.training_algorithms.sgd.EpochCounter {
        "max_epochs": 50,
        }
    }"""
    
    
train = """!obj:pylearn2.train.Train {
    dataset: &train %(dataset)s,
    model: %(model)s,
    algorithm: %(algorithm)s,
    extensions: [
        !obj:pylearn2.train_extensions.best_params.MonitorBasedSaveBest {
             channel_name: 'valid_objective',
             save_path: "dae2_best.pkl"
        },
    ],
    save_path: "dae2.pkl",
    save_freq: 1
}""" % locals()


train = yaml_parse.load(train)
print "Beginning training..."
train.main_loop()


def s(x):
    return 1. / (1. + np.exp(-x)) 


model = serial.load('dae2.pkl')
dataset_yaml_src = model.dataset_yaml_src
dataset = yaml_parse.load(dataset_yaml_src)

w1 = model.weights
w2 = model.w_prime
b1 = model.hidbias
b2 = model.visbias
w1 = w1.get_value()
w2 = w2.get_value()
b1 = b1.get_value()
b2 = b2.get_value()

# Plotting this many example input/output pairs
num2plot = 8

inputs = dataset.get_batch_topo(num2plot).reshape(num2plot, inputdim, inputdim, numchannels)
flat_inputs = inputs.reshape(num2plot, inputdim**2*numchannels)
h = s(np.dot(flat_inputs,w1)+b1)
flat_outputs = s(np.dot(h,w2)+b2)
outputs = flat_outputs.reshape(num2plot, inputdim, inputdim, numchannels)



def rgb2gray(image):
    return numpy.sum(image*numpy.array([0.3,0.59,0.11])[None,None,:],2)


inputs2 = numpy.zeros((num2plot, inputdim, inputdim))
outputs2 = numpy.zeros((num2plot, inputdim, inputdim))
  
for i in range(inputs.shape[0]):
    inputs2[i] = rgb2gray(inputs[i])
    outputs2[i] = rgb2gray(outputs[i])

# Plot Grayscale
for i in range(num2plot):
    plt.subplot(num2plot,2,2*i+1)
    plt.imshow(inputs2[i], cmap = cm.Greys_r)
    plt.subplot(num2plot,2,2*i+2)
    plt.imshow(outputs2[i], cmap = cm.Greys_r)


# Plot RGB (not sure what this does, actually, maybe just getting the first channel)
#for i in range(num2plot):
#    plt.subplot(num2plot,2,2*i+1)
#    plt.imshow(inputs[i], cmap = cm.Greys_r)
#    plt.subplot(num2plot,2,2*i+2)
#    plt.imshow(outputs[i], cmap = cm.Greys_r)

savestr = 'cifar.png'
plt.savefig(savestr)
